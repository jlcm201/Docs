/// Ejemplo variables de alcance de bloque

function ejemploES6AlcanceBloque() {
    if (true) {
        let variableDeBloque = "Soy una variable de alcance de bloque";
        console.log(variableDeBloque); // Esto imprime: "Soy una variable de alcance de bloque"
    }

    // Aquí, variableDeBloque no está definida
    console.log(variableDeBloque); // Esto generará un error: ReferenceError
}

function ejemploES5AlcanceBloque() {
    if (true) {
        var variableDeBloque = "No soy una variable de alcance de bloque";
        console.log(variableDeBloque); // Esto imprime: "No soy una variable de alcance de bloque"
    }

    // Aquí, variableDeBloque no está definida, pero es accesible
    console.log(variableDeBloque); // Esto NO generará un error: ReferenceError, 
}

/// Ejemplo de template literals

const nombre = "José Luis";
const edad = 43;

// Interpolación de variables
const saludo = `Hola, mi nombre es ${nombre} y tengo ${edad} años.`;
console.log(saludo);

// Multilinea
const multilinea = `Esta es una línea.
Y esta es otra línea.`;
console.log(multilinea);


/// Ejemplo función de flecha


const impar = numero => numero % 2 !== 0;

[1,2,3,4,5,6,7,8,9].filter(impar);

const numeros = [
    {num: 1, desc: 'uno'},
    {num: 2, desc: 'dos'},
    {num: 3, desc: 'tres'},
    {num: 4, desc: 'cuatro'},
    {num: 5, desc: 'cinco'},
    {num: 6, desc: 'seis'},
    {num: 7, desc: 'siete'},
    {num: 8, desc: 'ocho'},
    {num: 9, desc: 'nueve'},
    {num: 10, desc: 'diez'}
];


const impar = numero => {
    console.log(numero, numero % 2);
    return numero % 2 !== 0;
};


/// Ejemplo clase
class Persona {
    constructor(nombre, edad) {
        this.nombre = nombre;
        this.edad = edad;
    }

    saludar() {
        function msg() {
           console.log(`Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`); 
        }
        msg();
    }
};

/// Ejemplo parámetro por defecto

function saludar(nombre = 'Invitado') {
    return `Hola, ${nombre}!`;
}

console.log(saludar()); // "Hola, Invitado!"
console.log(saludar("José Luis")); // "Hola, José Luis!"

/// Ejemplo parámetros rest

function sumar(...numeros) {
    console.log(numeros);
    /// La función reduce permite transformar un arreglo en un único valor acumulando los resultados
    return numeros.reduce((acumulador, numero) => acumulador + numero, 0);
}

console.log(sumar(1, 2, 3)); // 6
console.log(sumar(10, 20, 30, 40)); // 100

/// Ejemplo operador spread

// Arreglos
const arr1 = [1, 2, 3];
const arr2 = [4, 5, 6];

// Usando el operador spread para combinar arrays
const combined = [...arr1, ...arr2];
console.log(combined); // [1, 2, 3, 4, 5, 6]

// Objetos
const obj1 = { a: 1, b: 2 };
const obj2 = { b: 3, c: 4 };

// Usando el operador spread para combinar objetos
const merged = { ...obj1, ...obj2 };
console.log(merged); // { a: 1, b: 3, c: 4 }
// Nota: 'b' se sobrescribe con el valor de obj2

/// Ejemplo operador spread

const impar = ({num: numero}) => numero % 2 !== 0;

numeros.map(numero => ({...numero, es: impar(numero) ? 'impar' : 'par'}));

/// Ejemplo destructuración
// Arreglo
const numeros = [1, 2, 3, 4, 5];

// Destructuración
const [primero, segundo, ...resto] = numeros;

console.log(primero); // 1
console.log(segundo); // 2
console.log(resto);   // [3, 4, 5]

// Objeto
const persona = {
    nombre: 'José Luis',
    edad: 43,
    ciudad: 'Zacatepec'
};

// Destructuración
const { nombre, ciudad } = persona;

console.log(nombre); // 'José Luis'
console.log(ciudad);   // 'Zacatepec'


/// Ejemplo de una promesa
function obtenerDatos() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const datos = { id: 1, nombre: 'José Luis' };
            const exito = true; // Cambia a false para simular un error

            if (exito) {
                resolve(datos);
            } else {
                reject('No se pudieron obtener los datos.');
            }
        }, 2000); // Simula un retraso de 2 segundos
    });
}

// Usar la función que devuelve una promesa
obtenerDatos()
    .then(datos => {
        console.log('Datos recibidos:', datos);
    })
    .catch(error => {
        console.error(error);
    });

/// Ejemplo Fetch async - await
// Función asíncrona para obtener datos de un endpoint
const obtenerDatos = async () => {
    try {
        const respuesta = await fetch('https://api.tvmaze.com/shows', {
            method: 'GET', // Método HTTP
            headers: {
                'Content-Type': 'application/json', // Tipo de contenido
                // Puedes agregar otros encabezados según lo que requiera la API
                'Access-Control-Allow-Origin': '*', // Permite el acceso desde cualquier origen
            },
            // mode: 'cors' // Descomentar si es necesario para habilitar CORS
        }); // Endpoint de ejemplo
        if (!respuesta.ok) {
            throw new Error('Error en la red: ' + respuesta.status);
        }
        const datos = await respuesta.json(); // Esperar a que se convierta a JSON
        console.log(datos); // Mostrar los datos en la consola
    } catch (error) {
        console.error('Error al obtener los datos:', error);
    }
}

// Llamar a la función asíncrona
obtenerDatos();

/// Ejemplo de Hook Personalizado: useLocalStorage
import { useState, useEffect } from 'react';

// Hook personalizado para manejar el localStorage
const useLocalStorage = (key, initialValue) => {
  // Estado para almacenar el valor
  const [storedValue, setStoredValue] = useState(() => {
    try {
      // Intenta obtener el valor del localStorage
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      console.error(error);
      return initialValue;
    }
  });

  // Efecto para actualizar el localStorage cuando el valor cambia
  useEffect(() => {
    try {
      window.localStorage.setItem(key, JSON.stringify(storedValue));
    } catch (error) {
      console.error(error);
    }
  }, [key, storedValue]);

  return [storedValue, setStoredValue];
};

export default useLocalStorage;


/// Cómo Usar el Hook Personalizado

import React from 'react';
import useLocalStorage from './useLocalStorage'; // Asegúrate de ajustar la ruta

const MiComponente = () => {
  const [nombre, setNombre] = useLocalStorage('nombre', 'Usuario');

  return (
    <div>
      <h1>Hola, {nombre}!</h1>
      <input
        type="text"
        value={nombre}
        onChange={(e) => setNombre(e.target.value)}
        placeholder="Escribe tu nombre"
      />
    </div>
  );
};

export default MiComponente;
